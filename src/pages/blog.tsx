import { useState } from 'react';
import Head from 'next/head';
import Link from 'next/link';
import Image from 'next/image';
import blog from '../data/blogs';
import { Footer } from '../components/Footer';
import { ScrollTop } from '../components/ScrollTop';
import * as S from '../styles/Blogs';
import { FiltersContainer, BButton} from '../styles/Blogs';
import * as T from '../styles/styles';
import { HiOutlineDesktopComputer } from 'react-icons/hi';
import { FaSearch } from 'react-icons/fa';
import { ArrowRight } from 'phosphor-react';
import { Publications } from '../components/Publications';
import { Button } from '@mantine/core';
import { useTranslation } from 'react-i18next';
import { useRouter } from 'next/router';
import { useEffect } from 'react';

const botkey = process.env.NEXT_PUBLIC_BOTKEY_URL;

interface BlogProps {
  target: HTMLInputElement;
}

export default function Blog() {
  const [query, setQuery] = useState('');
  const [sortCriteria, setSortCriteria] = useState('date'); // Default sorting by date
  const [selectedCategory, setSelectedCategory] = useState(''); // Default no category selected
  const [startDate, setStartDate] = useState(''); // Start date for filtering
  const [endDate, setEndDate] = useState(''); // End date for filtering
  const [readTime, setReadTime] = useState(''); // Single read time for filtering

  const { t, i18n } = useTranslation('common');
  const router = useRouter();
  const [currentLang, setCurrentLang] = useState<'en' | 'ta'>('en');

  useEffect(() => {
    const { locale } = router;
    setCurrentLang(locale as 'en' | 'ta');
  }, [router.locale]);

  const handleChange = (e: BlogProps) => {
    setQuery(e.target.value);
  };

  const handleSortChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSortCriteria(e.target.value);
  };

  const handleCategoryChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedCategory(e.target.value);
  };

  const handleStartDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setStartDate(e.target.value);
  };

  const handleEndDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setEndDate(e.target.value);
  };

  const handleReadTimeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setReadTime(e.target.value);
  };

  const handleClearFilters = () => {
    setQuery('');
    setSortCriteria('date');
    setSelectedCategory('');
    setStartDate('');
    setEndDate('');
    setReadTime('');
  };

  const filteredBlogs = blog
    .filter(blog => {
      const matchesQuery = blog.title.toLowerCase().includes(query.toLowerCase());
      return matchesQuery;
    })
    .filter(blog => {
      const matchesCategory = selectedCategory === '' || blog.tags.some(tag => tag.name === selectedCategory);
      return matchesCategory;
    })
    .filter(blog => {
      const [day, month, year] = blog.date.split('/').map(Number);
      const blogDate = new Date(year, month - 1, day).getTime();
      const start = startDate ? new Date(startDate).getTime() : -Infinity;
      const end = endDate ? new Date(endDate).getTime() : Infinity;
      const matchesDate = blogDate >= start && blogDate <= end;
      return matchesDate;
    })
    .filter(blog => {
      const readTimeValue = parseInt(blog.read);
      const readTimeFilter = readTime ? parseInt(readTime) : -Infinity;
      const matchesReadTime = readTimeFilter === -Infinity || readTimeValue === readTimeFilter;
      return matchesReadTime;
    });

  const sortedBlogs = filteredBlogs.sort((a, b) => {
    if (sortCriteria === 'date') {
      const [dayA, monthA, yearA] = a.date.split('/').map(Number);
      const [dayB, monthB, yearB] = b.date.split('/').map(Number);
      return new Date(yearB, monthB - 1, dayB).getTime() - new Date(yearA, monthA - 1, dayA).getTime();
    }
    return a.title.localeCompare(b.title);
  });

  return (
    <>
      <Head>
        <title>{currentLang === 'ta' ? 'ро╡ро▓рпИрокрпНрокродро┐ро╡рпБроХро│рпН | роЪро░ро╡рогроХрпБрооро╛ро░рпН' : 'Blogs | Saravanakumar'}</title>
        <meta property="og:title" content={currentLang === 'ta' ? 'ро╡ро▓рпИрокрпНрокродро┐ро╡рпБроХро│рпН | роЪро░ро╡рогроХрпБрооро╛ро░рпН' : 'Blogs | Saravanakumar'} />
      </Head>

      <ScrollTop />
      <T.Section>
        <T.Title>
          <p>../{currentLang === 'ta' ? 'ро╡ро▓рпИрокрпНрокродро┐ро╡рпБроХро│рпН' : 'blogs'}</p>
          {currentLang === 'ta' ? 'рокродро┐ро╡рпБроХро│рпН' : 'Posts'}
          <span>
            <HiOutlineDesktopComputer />{currentLang === 'ta' ? 'ро╡ро▓рпИрокрпНрокродро┐ро╡рпБ' : 'Blog'}
          </span>
        </T.Title>
        <T.Description>
          {currentLang === 'ta' ? 'роОройродрпБ ро╡ро▓рпИрокрпНрокродро┐ро╡рпБроХро│рпН ро╣ро╛ро╖рпНроирпЛроЯрпН роЗрогрпИропродро│родрпНродро╛ро▓рпН роЗропроХрпНроХрокрпНрокроЯрпБроХро┐ройрпНро▒рой. "ро╡ро▓рпИрокрпНрокродро┐ро╡рпИрокрпН рокро╛ро░рпНроХрпНроХ" роХро┐ро│ро┐роХрпН роЪрпЖропрпНродро╛ро▓рпН, роирпАроЩрпНроХро│рпН ро╣ро╛ро╖рпНроирпЛроЯрпН ро╡ро▓рпИрокрпНрокродро┐ро╡рпБ родро│родрпНродро┐ро▒рпНроХрпБ рооро╛ро▒рпНро▒рокрпНрокроЯрпБро╡рпАро░рпНроХро│рпН. ро╡ро┐ро░рпБрокрпНрокроорпН роЕро▓рпНро▓родрпБ роХро░рпБродрпНродрпБ родрпЖро░ро┐ро╡ро┐роХрпНроХ ро╣ро╛ро╖рпНроирпЛроЯро┐ро▓рпН роЙро│рпНроирпБро┤рпИроп ро╡рпЗрогрпНроЯрпБроорпН!' : 'My blogs are powered by Hashnode website. If you click on "View Blog", you\'ll be redirected to Hashnode Blog Site. In order to like or comment you need to login on Hashnode!'}
        </T.Description>

        <S.BlogContainer>
          <S.BlogContent>
            <div className="search">
              <p>{currentLang === 'ta' ? 'ро╡ро▓рпИрокрпНрокродро┐ро╡рпБ рокрпЖропро░ро╛ро▓рпН родрпЗроЯрпБроЩрпНроХро│рпН' : 'Search by Blog name'}</p>
              <div className="input">
                <input
                  type="text"
                  name="search"
                  placeholder={currentLang === 'ta' ? 'роЗроЩрпНроХрпЗ родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро╡рпБроорпН...' : 'Type here...'}
                  value={query}
                  onChange={handleChange}
                />
                <FaSearch />
              </div>
            </div>

            <FiltersContainer>
              <select onChange={handleSortChange} value={sortCriteria}>
                <option value="date">{currentLang === 'ta' ? 'родрпЗродро┐ропро┐ройрпНрокроЯро┐ ро╡ро░ро┐роЪрпИрокрпНрокроЯрпБродрпНродрпБ' : 'Sort by Date'}</option>
                <option value="title">{currentLang === 'ta' ? 'родро▓рпИрокрпНрокро┐ройрпНрокроЯро┐ ро╡ро░ро┐роЪрпИрокрпНрокроЯрпБродрпНродрпБ' : 'Sort by Title'}</option>
              </select>

              <select onChange={handleCategoryChange} value={selectedCategory}>
                <option value="">{currentLang === 'ta' ? 'роЕройрпИродрпНродрпБ ро╡роХрпИроХро│рпБроорпН' : 'All Categories'}</option>
                {Array.from(new Set(blog.flatMap(blog => blog.tags.map(tag => tag.name)))).map(category => (
                  <option key={category} value={category}>{category}</option>
                ))}
              </select>

              <div className="date-filters">
                <label>
                  {currentLang === 'ta' ? 'роЗро░рпБроирпНродрпБ:' : 'From:'}
                  <input type="date" value={startDate} onChange={handleStartDateChange} />
                </label>
                <label>
                  {currentLang === 'ta' ? 'ро╡ро░рпИ:' : 'To:'}
                  <input type="date" value={endDate} onChange={handleEndDateChange} />
                </label>
              </div>

              <div className="read-time-filters">
                <label>
                  {currentLang === 'ta' ? 'ро╡ро╛роЪро┐рокрпНрокрпБ роирпЗро░роорпН:' : 'Read Time:'}
                  <select onChange={handleReadTimeChange} value={readTime}>
                    <option value="">{currentLang === 'ta' ? 'роЕройрпИродрпНродрпБ ро╡ро╛роЪро┐рокрпНрокрпБ роирпЗро░роЩрпНроХро│рпН' : 'All Read Times'}</option>
                    {Array.from(new Set(blog.map(blog => blog.read))).map(time => (
                      <option key={time} value={time}>{time}</option>
                    ))}
                  </select>
                </label>
              </div>
            </FiltersContainer>

            <BButton onClick={handleClearFilters}>
              {currentLang === 'ta' ? 'ро╡роЯро┐рокрпНрокро╛ройрпНроХро│рпИ роЕро┤ро┐роХрпНроХро╡рпБроорпН' : 'Clear Filters'}
            </BButton>

            {!sortedBlogs.length && (
              <h3 className="not-found">{currentLang === 'ta' ? 'ро╡ро▓рпИрокрпНрокродро┐ро╡рпБ роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ ЁЯЩБ' : 'Blog not found ЁЯЩБ'}</h3>
            )}

            {sortedBlogs.map(blog => (
              <div key={blog.id}>
                <div className="border" />
                <S.BlogItem>
                  <div className="banner">
                    <Image
                      width={500}
                      height={300}
                      src={blog.img}
                      alt={blog.title}
                    />
                  </div>
                  <div>
                    <div className="title">
                      <h2>{blog.title}</h2>
                    </div>
                    <div className="description">
                      <p>{blog.description}</p>
                      <p className="date">{currentLang === 'ta' ? 'ро╡рпЖро│ро┐ропро┐роЯрокрпНрокроЯрпНроЯ родрпЗродро┐ :' : 'Date Published :'} {blog.date}</p>
                      <p className="read">{currentLang === 'ta' ? 'ро╡ро╛роЪро┐рокрпНрокрпБ роирпЗро░роорпН :' : 'Reading Time :'} {blog.read}</p>
                      <div className="tags">
                        {blog.tags.map(tag => (
                          <span key={tag.name}>{tag.name}</span>
                        ))}
                      </div>
                    </div>
                    <Link href={blog.url}>
                      <T.ButtonAlternatives>
                        {currentLang === 'ta' ? 'ро╡ро▓рпИрокрпНрокродро┐ро╡рпИрокрпН рокро╛ро░рпНроХрпНроХ' : 'View Blog'}
                        <ArrowRight
                          style={{ marginBottom: '-0.1rem' }}
                          weight="bold"
                          size={16}
                        />
                      </T.ButtonAlternatives>
                    </Link>
                  </div>
                </S.BlogItem>
              </div>
            ))}

            <p className="github">
              {currentLang === 'ta' ? 'роПропрпН, роПропрпН, роПропрпН... роОройроХрпНроХрпБ роЗройрпНройрпБроорпН роЕродро┐роХроорпН роЙро│рпНро│родрпБ ' : 'Hey, hey, hey... I have even more on '}
              <a href="https://saravanakumar2003.hashnode.dev/">{currentLang === 'ta' ? 'роЗроЩрпНроХрпЗ' : 'here'}</a>!!
            </p>
          </S.BlogContent>
        </S.BlogContainer>
      </T.Section>
      <Publications />
      <script src="https://cdn.botpress.cloud/webchat/v1/inject.js"></script>
      <script src={botkey} defer></script>
      <Footer />
    </>
  );
}